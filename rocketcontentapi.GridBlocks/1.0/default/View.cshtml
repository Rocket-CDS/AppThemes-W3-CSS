@inherits RocketContentAPI.Components.RocketContentAPITokens<Simplisity.SimplisityRazor>
@using DNNrocketAPI.Components;
@AssignDataModel(Model)
@AddProcessDataResx(appThemeView, true)
<!--inject-->

<div class="@(moduleData.GetSetting("cssclass"))">

    <div class="w3-container">

        [INJECT:appthemesystem,ArticleHeaderView.cshtml]

        <div class="w3-container grid-refs">
            <div class="w3-row grid-sizer"></div>

            @foreach (var articleRowData in articleData.GetRows())
            {
                var rowData = articleRowData.Info;
                var hideRow = rowData.GetXmlPropertyBool("genxml/checkbox/hiderow");
                if (!hideRow)
                {
                    var gridsize = articleRowData.Info.GetXmlProperty("genxml/select/gridsize");
                    var title = rowData.GetXmlProperty("genxml/lang/genxml/textbox/title");
                    var articleImage = articleRowData.GetImage(0);

                    foreach (var linkData in articleRowData.Getlinks())
                    {
                        var cssClassRow = "";
                        if (rowData.GetXmlProperty("genxml/textbox/cssclass") != "")
                        {
                            cssClassRow = rowData.GetXmlProperty("genxml/textbox/cssclass");
                        }
                        if (linkData.IsDisabled || linkData.Hidden)
                        {
                            <div class="grid-item grid-item@(gridsize)  @(cssClassRow)">
                                <div class="refsimg" style="background-image:url('@ImageUrl(articleImage.RelPath, "", "")');">
                                    <div class="refsoverlay"><h4>@rowData.GetXmlProperty("genxml/lang/genxml/textbox/title")</h4></div>
                                    <div class="refstext">
                                        <h3>@rowData.GetXmlProperty("genxml/lang/genxml/textbox/title")</h3>
                                        <p>@rowData.GetXmlProperty("genxml/lang/genxml/textbox/title2")</p>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <a class="grid-item grid-item@(gridsize) @(cssClassRow)" href="@(linkData.Url)" target="@(linkData.Target)">
                                <div class="refsimg" style="background-image:url('@ImageUrl(articleImage.RelPath, "", "")');">
                                    <div class="refsoverlay">@rowData.GetXmlProperty("genxml/lang/genxml/textbox/title")</div>
                                    <div class="refstext">
                                        <h3 class="refstext-line1">@rowData.GetXmlProperty("genxml/lang/genxml/textbox/title")</h3>
                                        <h4 class="refstext-line2">@rowData.GetXmlProperty("genxml/lang/genxml/textbox/title2")</h4>
                                    </div>
                                </div>
                            </a>
                        }
                    }
                }
            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Isotope
        var $grid = $('.grid-refs').isotope({
            itemSelector: '.grid-item',
            percentPosition: true,
            masonry: {
                columnWidth: '.grid-sizer'
            }
        });
        // Overlap fix
        $grid.imagesLoaded().progress(function () {
            $grid.isotope('layout');
        });
    });
</script>